{
    // ENVIRONEMNTS
    "browser"      : true,      // defines globals exposed by modern browsers:
    "couch"        : false,     // CouchDB
    "devel"        : false,     // Development/debugging (alert, confirm, etc)
    "dojo"         : false,     // Dojo Toolkit
    "jquery"       : false,     // jQuery
    "mocha"        : false,     // Mocha functions should be predefined
    "mootools"     : false,     // MooTools
    "node"         : false,     // Node.js
    "nonstandard"  : false,     // Widely adopted globals (escape, unescape, etc)
    "phantom"      : false,     // if PhantomJS symbols should be allowed
    "prototypejs"  : false,     // Prototype and Scriptaculous
    "rhino"        : false,     // Rhino
    "shelljs"      : false,     // if ShellJS globals should be predefined
    "typed"        : false,     // if typed array globals should be predefined
    "worker"       : false,     // Web Workers
    "wsh"          : false,     // Windows Scripting Host
    "yui"          : false,     // Yahoo User Interface

    // ENFORCING OPTIONS
    "bitwise"      : true,      // prohibits the use of bitwise operators
    "curly"        : true,      // always put curly braces around blocks in loops and conditionals
    "camelcase"    : true,      // force all variable names to use either camelCase style or UPPER_CASE with underscores
    "eqeqeq"       : true,      // prohibits the use of == and != in favor of === and !==
    "forin"        : true,      // requires all for in loops to filter object's items
    "freeze"       : true,      // if non-breaking spaces should be disallowed
    "immed"        : true,      // prohibits the use of immediate function invocations without wrapping them in parentheses
    "indent"       : "4",       // enforces specific tab width
    "latedef"      : "nofunc",  // prohibits the use of a variable before it was defined
    "newcap"       : true,      // requires you to capitalize names of constructor functions
    "noarg"        : true,      // prohibits the use of arguments.caller and arguments.callee
    "noempty"      : true,      // warns when you have an empty block in your code
    "nonbsp"       : true,      // if non-breaking spaces should be disallowed
    "nonew"        : true,      // prohibits the use of constructor functions for side-effects
    "undef"        : true,      // prohibits the use of explicitly undeclared variables
    "quotmark"     : "single",  // enforces the consistency of quotation marks used throughout your code
    "unused"       : true,      // warns when you define and never use your variables
    "strict"       : false,      // requires all functions to run in EcmaScript 5's strict mode

    "es3"          : false,     // Internet Explorer 6/7/8/9
    "maxparams"    : false,     // max number of formal parameters allowed per function
    "maxdepth"     : false,     // control how nested do you want your blocks to be
    "maxstatements": false,     // max number of statements allowed per function
    "maxcomplexity": false,     // control cyclomatic complexity throughout your code
    "maxlen"       : false,     // maximum length of a line
    "plusplus"     : false,     // prohibits the use of unary increment and decrement operators

    // RELAXING OPTIONS
    "asi"         : false,      // suppresses warnings about missing semicolons
    "boss"        : false,      // suppresses warnings about the use of assignments in cases where comparisons are expected
    "debug"       : false,      // suppresses warnings about the debugger statements
    "eqnull"      : false,       // suppresses warnings about == null comparisons
    "esnext"      : false,      // This option tells JSHint that your code uses ECMAScript 6 specific syntax
    "evil"        : false,      // suppresses warnings about the use of eval
    "expr"        : false,      // suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls
    "funcscope"   : false,      // suppresses warnings about declaring variables inside of control structures while accessing them later from the outside
    "globalstrict": false,      // suppresses warnings about the use of global strict mode
    "ignore"      : false,      // start/end ignoring lines of code, bypassing the lexer
    "iterator"    : false,      // suppresses warnings about the __iterator__ property
    "lastsemic"   : false,      // suppresses warnings about missing semicolon
    "laxbreak"    : false,      // suppresses most of the warnings about possibly unsafe line breaking
    "laxcomma"    : false,      // suppresses warnings about comma-first coding style
    "loopfunc"    : false,      // suppresses warnings about functions inside of loops
    "maxerr"      : false,      // This options allows you to set the maximum amount of warnings JSHint will produce before giving up. Default is 50.
    "moz"         : false,      // This options tells JSHint that your code uses Mozilla JavaScript extensions.
    "multistr"    : false,      // suppresses warnings about multi-line strings
    "notypeof"    : false,      //  suppresses warnings about invalid typeof operator values
    "noyield"     : false,      //  suppresses warnings about generator functions with no yield statement in them.
    "proto"       : false,      // suppresses warnings about the __proto__ property
    "scripturl"   : false,      // suppresses warnings about the use of script-targeted URLsâ€”such as javascript:...
    "shadow"      : false,      // suppresses warnings about variable shadowing
    "sub"         : false,     // suppresses warnings about using [] notation when it can be expressed in dot notation: person['name'] vs. person.name
    "supernew"    : false,      // suppresses warnings about "weird" constructions like new function () { ... } and new Object;
    "validthis"   : false,      // suppresses warnings about possible strict violations when the code is running in strict mode and you use this in a non-constructor function
    "withstmt"    : false,     // if with statements should be allowed

    "globals": {                // variables that are accessible globaly, the boolean flag indicates if they can be reassigned.
        "angular": false
    },

    "overrides": {              // Override configurations for certain folders/file patterns
        "/*.spec.js": {
            "undef": false
        }
    }
}